
✅ What is DynamoDB?
DynamoDB is a fully managed, serverless NoSQL database service provided by AWS. It’s designed to deliver single-digit millisecond latency at any scale, making it ideal for real-time applications.

🧩 Core Components of DynamoDB
1. Tables
A table is where your data is stored.
Think of it like a sheet in Excel or a collection in MongoDB.

2. Items
An item is a single record in the table (like a row).
It is identified uniquely by its primary key.

3. Attributes
Attributes are the fields/columns of the item.
Items in the same table don’t need to have the same attributes (flexible schema).

🔑 Primary Keys in DynamoDB
🟢 Types of Primary Keys
Partition key only
→ Uniquely identifies an item (e.g., user_id = 123).

Composite (Partition + Sort Key)
→ Enables querying related items (e.g., user_id = 123 and order_id = 456).

📌 Composite Primary Key Example{
  "UserID": "U123",
  "OrderID": "O456",
  "Amount": 1000
}
Allows multiple orders for a user, and items are sorted by OrderID under the same UserID.

🔍 Secondary Indexes
🔸 Global Secondary Index (GSI)
Can query on non-primary key attributes.

Supports a different partition and sort key than the main table.
🔸 Local Secondary Index (LSI)
Shares the same partition key but allows a different sort key.

Useful for different sorting strategies per item group.
🔁 DynamoDB Streams
Captures a time-ordered log of item-level changes in the table.
Can be used with AWS Lambda for event-driven processing.
Example: Send an email when a new item is added to the orders table.

📦 Table Classes
1. Standard (default)
→ For frequently accessed data.

2. Infrequent Access (DDB Standard-IA)
→ 60% cheaper for data that’s read/written infrequently (but still needs millisecond latency).

⚖️ Capacity Modes
1. Provisioned Capacity
You specify read/write capacity units (RCUs/WCUs).

Best for predictable workloads.

2. On-Demand Capacity
Auto-scales based on traffic.

Pay-per-request pricing — best for unpredictable traffic.

Serverless — no pre-provisioning needed.

🚀 Key Features & Integrations
| Feature                     | Benefit                                           |
| --------------------------- | ------------------------------------------------- |
| **Auto-scaling**            | Adjusts capacity based on usage.                  |
| **Point-in-Time Recovery**  | Restore any state in the last 35 days.            |
| **Encryption at rest**      | Enabled by default using KMS.                     |
| **Global Tables**           | Multi-region, active-active replication.          |
| **Integration with Lambda** | Enables serverless event-driven architectures.    |
| **Fine-grained IAM auth**   | Secure access to items/attributes based on roles. |

☁️ Serverless Benefits
No infrastructure to manage.

Automatically scales.

Built-in fault tolerance and high availability.

Ideal for mobile apps, gaming, IoT, ecommerce, etc.

📌 Use Cases of DynamoDB
| Use Case                     | Why DynamoDB Works Well                            |
| ---------------------------- | -------------------------------------------------- |
| **Gaming Leaderboards**      | Millisecond latency, massive scale                 |
| **Shopping Carts / Orders**  | Fast reads/writes, composite keys for users/orders |
| **IoT Device Telemetry**     | Handles high write throughput                      |
| **Chat Applications**        | Event-driven with DynamoDB Streams and Lambda      |
| **Mobile Applications**      | Serverless backend with seamless scaling           |
| **User Profiles / Sessions** | Flexible schema, single-digit latency              |

🧠 Real-Life Analogy
DynamoDB = Giant Filing Cabinet
Each drawer (table) has folders (items) labeled uniquely by IDs (primary key). You can group them by sections (composite keys), create custom index cards (GSIs/LSIs), 
and even get alerts when someone adds/removes something (Streams). And the cabinet grows automatically based on how many people use it — no need to buy a new one!


✅ For AWS Solutions Architect Exam:
🔸 When to Use DynamoDB
Millisecond latency is critical.
Variable or unpredictable traffic.
Serverless, auto-scaling, and managed durability needed.
Global presence with multi-region replication.

🔸 When NOT to Use DynamoDB
Complex relational queries (joins, transactions across many tables).
Fixed schema and transactional integrity across multiple relations.
Use RDS or Aurora in such cases.

🧠 Real-Life Analogy: DynamoDB = Airport Check-in System
Imagine you're at a busy international airport. Let’s walk through how DynamoDB maps to this environment:

| DynamoDB Concept      | Real-World Airport Analogy                                                 |
| --------------------- | -------------------------------------------------------------------------- |
| **Table**             | Check-in counter area (e.g., Emirates counter for all passengers)          |
| **Item**              | Each passenger checking in (unique record)                                 |
| **Attribute**         | Passenger info: name, passport no, seat, destination (flexible fields)     |
| **Primary Key**       | Boarding Pass Number or Passport Number (uniquely identifies a person)     |
| **Composite Key**     | `FlightNumber` + `SeatNumber` — multiple passengers per flight             |
| **GSI/LSI**           | Staff kiosk to **search by destination** or **frequent flyer number**      |
| **DynamoDB Streams**  | Security alert system — **sends notification** if someone changes seat     |
| **Auto-scaling**      | If crowd increases, airport **opens more counters** instantly              |
| **On-Demand Billing** | Airport **only charges based on number of people processed**, not per hour |
| **Global Tables**     | Multiple international terminals sync data in **real time across regions** |
