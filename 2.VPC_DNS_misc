| Component                  | Purpose                                                      |
| -------------------------- | ------------------------------------------------------------ |
| **CIDR Block**             | Defines IP range of the VPC (e.g., `10.0.0.0/16`)            |
| **Subnets**                | Divide VPC into logical zones (public or private)            |
| **Route Tables**           | Decide how traffic flows (local, internet, NAT)              |
| **Internet Gateway (IGW)** | Enables internet access to public subnets                    |
| **NAT Gateway**            | Enables private subnets to access internet **outbound only** |
| **Security Groups**        | Stateful firewalls per resource                              |
| **NACLs**                  | Stateless firewalls per subnet                               |
| **DHCP Options Set**       | Controls DNS name resolution settings                        |

🔹 VPC and Regions
Every VPC exists inside a single AWS region.

You can create multiple VPCs per region (limit: 5 by default, can increase).

VPC is regional, but its subnets are AZ-specific (Availability Zones).

❗ VPC does NOT span regions, only AZs within a region.

🔸 Default VPC
When you create an AWS account, AWS automatically gives you a default VPC in each region.

| Feature          | Default VPC                         |
| ---------------- | ----------------------------------- |
| Exists?          | Yes, in every region                |
| Subnets          | 1 per AZ, already created           |
| Internet access? | Yes, via attached Internet Gateway  |
| Public IPs       | Automatically assigned to instances |
| DNS Support      | Enabled by default                  |


🔹 Public IP vs Private IP
🔸 Private IP
Always assigned to every EC2 instance (even in private subnets).
Used for internal communication.

Stays with the instance across reboots (unless replaced manually).
🔸 Public IP
Assigned only if in a public subnet + explicitly enabled.

Used for internet access.
Dynamic: Changes if you stop/start the instance (unless using Elastic IP).

🔹 Does Public IP Get Assigned by Default?
🔹 Does Public IP Get Assigned by Default?

✅ How a Solution Architect Should Think


Do you need a new network?
 └── Yes → Create a VPC
        ├── Need internet-facing apps?
        │     ├── Yes → Create public subnet + IGW
        │     └── No  → Private subnet + NAT Gateway (optional)
        ├── Need fixed IP?
        │     └── Use Elastic IP
        ├── Need to connect to on-prem?
        │     └── Use Site-to-Site VPN or Direct Connect
        └── Want to allow DNS resolution?
              ├── Yes → Enable DNS Support + DNS Hostnames


| Question                                      | Architectural Reason                                                      |
| --------------------------------------------- | ------------------------------------------------------------------------- |
| Do I need internet access for this workload?  | If yes, place in public subnet + IGW. If no, keep private.                |
| Should the instance be accessible externally? | Use public IP only if absolutely needed.                                  |
| Should I keep the IP consistent?              | Assign Elastic IP.                                                        |
| Is this VPC secure?                           | Use NACLs, SGs, and avoid overly permissive rules.                        |
| Should I use default or custom VPC?           | Use **custom VPC** in production — more control.                          |
| Should I isolate workloads?                   | Use **multiple subnets** and **multiple AZs**.                            |
| Should I peer/connect with other networks?    | Consider **VPC peering**, **Transit Gateway**, or **VPN/Direct Connect**. |


🔹 What is DNS in a VPC?
DNS (Domain Name System) in a VPC allows your EC2 instances and other services to resolve:
Private DNS names to private IPs (internal resolution)
Public DNS names to public IPs (external resolution)

📌 Summary Cheat Sheet (Exam-Ready)
✅ enableDnsSupport = Allows EC2 to use VPC DNS resolver.
✅ enableDnsHostnames = Gives EC2 DNS hostnames for public/private IPs.
❗ Both must be true to assign public DNS names to EC2 instances with public IPs.
🔐 Always design VPCs with DNS support in mind for internal and external name resolution.
🔄 DNS changes can affect how instances communicate, especially with Route 53 private hosted zones or VPC peering.

Route 53 private hosted zone names
In other words:
DNS in a VPC = name-to-IP translation inside your private AWS network.

🔸 Why Is DNS Important in AWS?
As a Solution Architect, you need to use DNS to:
Avoid hardcoding IP addresses
Enable service discovery
Work with microservices, Lambda, ECS, EKS, etc.
Use Route 53 for internal domain resolution
Ensure VPC-peered resources can resolve names

🔹 Two Main DNS Options in a VPC
These options are VPC-level settings that control DNS behavior:

| Option                 | Default                                                | Meaning                                                                             |
| ---------------------- | ------------------------------------------------------ | ----------------------------------------------------------------------------------- |
| **enableDnsSupport**   | `true`                                                 | Allows instances in the VPC to use **Amazon-provided DNS server**                   |
| **enableDnsHostnames** | `false` (for custom VPC) <br> `true` (for default VPC) | Assigns **DNS hostnames** (like `ec2-1-2-3-4.compute-1.amazonaws.com`) to instances |






Automatic DNS Entries: Private IP addresses are automatically mapped to DNS entries.
AWS DNS Server Access: The DNS servers can be accessed at the second IP in the VPC CIDR block or via 169.254.169.253.
Enable DNS Hostnames: Necessary to assign public DNS hostnames to instances with public IP addresses.
Enable DNS Support: Must be active for the VPC to resolve DNS queries using AWS-provided servers.


Step	                            Action	                                                      Expected Outcome
Dynamic IP Demonstration	        Stop and restart the instance	                      Public IP changes from 52.90.159.117 to a new value
Allocating an Elastic IP	        Allocate a new Elastic IP in EC2 dashboard        	A static IP (e.g., 35.173.92.86) is assigned to your account
Associating the Elastic IP	      Associate the Elastic IP with your instance	       The instance now consistently uses the Elastic IP
Verifying Connectivity	          Ping the Elastic IP	                               Successful replies confirm connectivity
Ensuring Elastic IP Persistence 	Reboot the instance	                              Elastic IP remains unchanged
Releasing the Elastic IP	       Disassociate and release the Elastic IP	           Elastic IP is removed from your account

🔸 enableDnsSupport = true ✅
"Can I resolve domain names inside this VPC?"
If true → Instances can resolve DNS using AWS’s built-in DNS.

If false → No DNS resolution works inside the VPC.

🧠 Architect Insight:
This is the core DNS engine switch.
Keep it enabled always, unless you’re using custom DNS resolvers (rare).

🔸 enableDnsHostnames = true ✅
"Should AWS assign public DNS names to EC2 instances?"
If true:

Public IPs get public DNS names.
Private IPs get private DNS names.

If false:
Even if EC2 has a public IP, no public DNS name is given.

🧠 Architect Insight:
Required if you want to SSH using ec2-xx-xx-xx-xx.compute.amazonaws.com
Needed for internal name resolution
Also required when using Route 53 private hosted zones

🧪 Example Scenarios
Example 1: Default VPC
✅ enableDnsSupport = true

✅ enableDnsHostnames = true

✅ Outcome: EC2 gets both private and public DNS names.

You can SSH into the instance using the DNS name.

Example 2: Custom VPC for Internal App
✅ enableDnsSupport = true

❌ enableDnsHostnames = false (default)

Outcome:

EC2 gets a private IP, but no DNS hostname

Can’t resolve internal service names easily

➡️ Fix: Enable enableDnsHostnames via console, CLI, or Terraform


🔐 What Are AWS Firewalls?
In AWS, firewalls are used to control which traffic can go in and out of your cloud resources like EC2 instances or entire networks.
There are two main tools you use for this in AWS:

Security Groups
Network ACLs (NACLs)

Both help protect your cloud resources, but they work differently and are used for different reasons.

🧱 1. Security Groups – Think of them as Bodyguards for EC2
👉 What is it?
A security group is like a gatekeeper for your EC2 instances (or databases, load balancers).
It allows certain types of traffic in and out, based on rules you define.

👉 How it works?
Only allows traffic you approve (no “deny” rules).
It’s stateful – means if someone is allowed in, AWS will automatically allow them back out.
Example: If you allow traffic on port 80 (HTTP), return traffic is automatically allowed.

👉 Where and when to use?
Use it for specific resources like:
EC2 servers
RDS databases
Load balancers (ALB/NLB)
When you want to control access per resource.

✅ Best Practice:
Only open necessary ports (e.g., 22 for SSH, 80/443 for web).
Don’t allow 0.0.0.0/0 (open to all) unless really needed.
Group rules based on purpose (like WebSG, DBSG).

🌐 2. NACLs (Network Access Control Lists) – Think of them as Fence for Your Subnet
👉 What is it?
NACLs are like security fences for a group of machines (called a subnet).
They control who can enter or leave a subnet.
👉 How it works?
NACLs have both allow and deny rules.
It is stateless – means if you allow incoming traffic, you also have to allow outgoing traffic separately.
Example: If you allow traffic IN on port 80, you also need to allow OUT traffic on port 80 (or the response port), otherwise it will be blocked.

👉 Where and when to use?
Use it at the subnet level when:
You want to block certain IPs (bad actors).
You want extra security on top of security groups.

✅ Best Practice:
Use NACLs for broad rules.
Deny access to known bad IPs.
Make sure both inbound and outbound rules are set correctly.


🔁 Stateful vs Stateless (Key Difference)

| Feature         | Security Group             | NACL                           |
| --------------- | -------------------------- | ------------------------------ |
| Works on        | Instance (like EC2)        | Subnet (group of EC2s)         |
| Type            | Stateful (automatic reply) | Stateless (no automatic reply) |
| Rules           | Allow only                 | Allow and Deny                 |
| Direction setup | Inbound & Outbound         | Inbound & Outbound             |



🧠 When to Use What? (Decision Flow)
Q: Do I want to control traffic to a specific EC2 or RDS?
→ Use Security Groups

Q: Do I want to block an IP at the subnet level?
→ Use NACLs

Q: Do I want automatic return traffic (easier setup)?
→ Use Security Groups

Q: Do I want to apply rules to all machines in a subnet?
→ Use NACLs

Q: Do I need to deny a specific IP or port?
→ Use NACLs


💡 Example Scenario
Let’s say you have a web application and a database:

For the web server:

Security Group: Allow 80/443 from the internet.

NACL: Allow 80/443 from the internet, deny known bad IPs.

For the database server:

Security Group: Allow 3306 (MySQL) only from the web server.

NACL: Allow MySQL port from web subnet, deny everything else.



 Summary (In Simple Points)
Security Groups = For individual servers (like EC2). They are stateful and easier to manage.
NACLs = For entire subnets. They are stateless and give more control (like blocking IPs).

Use both together for better security (defense-in-depth).

Always allow only what’s necessary.
Monitor traffic using VPC Flow Logs
