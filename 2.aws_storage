| **Storage Type**                | **Ideal Use Cases**                                                                                                                                               | **Optimization Strategy**                                                                                                                                                                                                                                                                                                    | **Architectural Considerations**                                                                                                                                                                                                                     |
| ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **ðŸŸ¦ Block Storage (EBS)**      | - EC2 root volumes<br>- High-performance DBs (RDS, NoSQL)<br>- Low-latency transactional systems<br>- Log processing                                              | - Use **gp3** over gp2 (lower cost, decoupled IOPS)<br>- **Right-size volumes**; avoid over-provisioning<br>- Use **st1/sc1** for throughput workloads<br>- Schedule **snapshot cleanup** using AWS Backup                                                                                                                   | - **Tightly coupled to EC2**<br>- Plan per AZ, not cross-AZ<br>- Consider RAID for performance<br>- Use **EBS-optimized** EC2 instances                                                                                                              |
| **ðŸŸ© File Storage (EFS / FSx)** | - Shared file systems<br>- Linux-based apps<br>- Lift-and-shift workloads<br>- ML / data science needing parallel access<br>- CI/CD code repos                    | - Use **EFS One Zone** for dev/test or non-critical data<br>- Enable **Intelligent-Tiering** (automatically moves infrequently accessed files to IA tier)<br>- Use **FSx for Lustre** for high-speed workloads from S3<br>- Mount with correct throughput/performance mode                                                   | - More expensive than S3 â€“ use only when app requires shared FS<br>- EFS has **burst mode** (free) vs. provisioned throughput (extra cost)<br>- FSx for Windows for SMB workloads<br>- Leverage VPC peering/VPC endpoints for access across networks |
| **ðŸŸ¨ Object Storage (S3)**      | - Static website hosting<br>- Backup/archive<br>- Media delivery (videos, images)<br>- Logs, reports, IoT telemetry<br>- Data lake/analytics<br>- ML input/output | - Use **lifecycle rules** to transition data to:<br>â€ƒâ†’ S3 IA<br>â€ƒâ†’ S3 Glacier<br>â€ƒâ†’ S3 Deep Archive<br>- Use **S3 Intelligent-Tiering** for unpredictable access<br>- Compress files (zip, gzip) before storing<br>- Use **S3 Storage Lens** to analyze and optimize usage<br>- Configure **multi-part uploads** efficiently | - **11 9s durability** but S3 Standard is pricier<br>- Use **One Zone-IA** for non-critical data<br>- Retrieve only necessary data from Glacier<br>- Use **event-driven access** (S3 + Lambda) for processing efficiency                             |
